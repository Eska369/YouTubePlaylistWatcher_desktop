// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YouTubePlaylistWatcher_desktop.Models;

#nullable disable

namespace YouTubePlaylistWatcher_desktop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404093551_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YouTubePlaylistWatcher_desktop.Models.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("YouTubePlaylistWatcher_desktop.Models.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("PlaylistId")
                        .HasColumnType("text")
                        .HasColumnName("playlist_id");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_title");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etag");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("videos", (string)null);
                });

            modelBuilder.Entity("YouTubePlaylistWatcher_desktop.Models.Video", b =>
                {
                    b.HasOne("YouTubePlaylistWatcher_desktop.Models.Playlist", "Playlist")
                        .WithMany("Videos")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("YouTubePlaylistWatcher_desktop.Models.Playlist", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
